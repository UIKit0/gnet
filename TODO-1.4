
GNet 1.4

Please email gnet-dev@gnetlibrary.org with your comments.


API cleanup

- Move udp_mcast_ttl to mcast?

   Check: what's the difference between IP_TTL and IP_MULTICAST_TTL
   anyway?


Experimental changes

- conn/server and iochannel become "normal"

   Review code again.  Some of the iochannel helper functions may be
   covered by GLib 2.0.


Docs and examples

- Document iochannel functions.

- Add server example that uses pthreads.


New features

- New URL functions: http_escape, http_unescape.  

    Does someone have code for this (or want to write code for this)?
    Are there any other URL functions we should have?
    
    COMPATIBLE: New API


- IPv6 support

    Hard.

    Use getaddrinfo() in gnet_gethostbyname() to add IPv6
    compatibility.  Update GInetAddr and GNet functions
    accordingly.
    
    ISSUE: getaddrinfo() will now do two DNS lookups (A and AAAA),
    which adds latency.  I don't think this is a major problem.
    We could add a function that disables IPv6 lookups
    (gnet_ipv6_{get/set}_enabled).  It would be enabled by
    default.  Let me know if you want this.
    
    BINARY INCOMPATIBLE: GNet will use IPv6 in situations where IPv4
    was used before. (?)

    TODO:
	- how should binding work?
	- fix mcast join
	- fix gnet_inetaddr_is_*()
	- check storage format for in6_addr
	- fix everything marked FIX

   - inetaddr_equal - can a ipv4 address equal an ipv6 address?


- New Inetaddr functions:

    ISSUE: getaddrinfo() returns IPv6 addresses before IPv4
    addresses.  If gnet_inetaddr_new() uses
    gnet_inetaddr_new_list(), this may break compatibility.
    
    inetaddr_bytes_new(const guint8* addr, const gint length);
    
    gint 
    gnet_inetaddr_get_service (gchar* service, gchar* proto)
    
    Uses getservbyname() to map (service, proto) to a port
    number.  @proto can be "tcp", "udp", or NULL.  Usually, the
    port numbers for the TCP and UDP service are identical.  Some
    people use this.  Functionality depends on the
    /etc/services file.
    
    ISSUE: Should there be a inetaddr_get_service_name() too.
    (Maps port to string).
    
    BINARY INCOMPATIBLE: Will use IPv6 in situations where IPv4
    was used before.

    references:
    Basic Socket Interface Extensions for IPv6	
	ftp://ftp.isi.edu/in-notes/rfc2553.txt


    Do inetaddr async funcs need an error status?  Isn't NULL enough?


Possible changes

- Derive TcpSocket/UdpSocket from IOChannel

    There's a one-to-one correspondence between the two.  A socket is
    a type of IO channel.  It may be easier for new users to learn and
    use the library if we do this.  It does add a layer of indirection
    which could hurt performance.

    MOSTLY-COMPATIBLE: socket_get_iochannel would be needed.

    Likewise, derive server and conn from TcpSocket


- Differentiate between creating and connecting.  

    So you'd have:

    tcp_socket_new(void)            (this just calls socket())
    tcp_socket_connect(InetAddr*)   (this calls bind(), connect())

    The advantage is that we could set options and also allow the user
    to bind to a specific address if the user is on a multi-homed
    system.

    Or, add tcp_socket_new_bind() and have tcp_socket_new call it.
    You shouldn't have to bind a connecting socket, so this may not be
    needed.  (Well, sometimes you do for UDP.)

    GConn does this to an extent, so it may not be necessary.

    SOURCE-CODE INCOMPATIBLE: Easy to update.



========================================
DONE

- New functions: gnet_inetaddr_new_list() and
    gnet_inetaddr_new_list_async().  These return GLists of
    GInetAddr's.  A domain name can map to serveral addresses.
    This new API exposes this.

- TCP new async's callback may be called in the create function.
    Maybe fix this to be consistent with InetAddr.

- URI parsing:

    gnet_uri_new("") results in NULL.  Before it created a GURI.


- Remove "localhost" check from gnet_inetaddr_new_nonblock().

    BINARY INCOMPATIBLE: But very minor.

- gnet_*_get_iochannel() renamed gnet_*_get_io_channel()

    BINARY AND SOURCE-CODE INCOMPATIBLE

    There are are source-code compatible macros, but the semantics
    have changed.  get_io_channel() no longer refs 

    (Note that get_io_channel() is also not binary compatible -
     the ref/unref semantics have changed)

- GInetAddrNewAsyncFunc's inetaddr should be callee owned.  It's a
    new() function so this makes more sense.

    BINARY INCOMPATIBLE: May result in memory leaks.

- Simplify callbacks.  Prototypes of GInetAddrGetNameAsyncFunc,
    GInetAddrGetNameAsyncFunc, and GNetIOChannelReadAsyncFunc
    have been changed.

    SOURCE-CODE INCOMPATIBLE: Easy to update.

- Rename URL to URI.  Some field names renamed.

    SOURCE-CODE INCOMPATIBLE

- Header files should go into gnet-MAJOR-MINOR, so different versions
    can co-exist.

    COMPATIBLE: Developers should use pkg-config.

- Remove gnet-config

    BUILD INCOMPATIBLE: Developers should now use pkg-config

- gnet_*_get_io_channel() does not ref the channel before returning
    it.  

    BINARY INCOMPATIBLE: Check for unnecessary g_io_channel_unref()'s.

- URI module is no longer experimental.

