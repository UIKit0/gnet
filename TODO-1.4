
GNet 1.4 (or 2.0)

Please email gnet-dev@gnetlibrary.org with your comments.


API cleanup

    Do inetaddr async funcs need an error status?  Isn't NULL enough?

    Rename: new_X -> new_with_X
    Rename: port_new to new_with_port

    Clean UDP API.  The packet stuff is inconsistent for send vs. receive.


Experimental changes

- conn/server and iochannel become "normal"

   Review code again.  Some of the iochannel helper functions may be
   covered by GLib 2.0.


Docs and examples

- Document iochannel functions.

- Add server example that uses pthreads or gthreads.


New features

- New URL functions: http_escape, http_unescape.  

    Does someone have code for this (or want to write code for this)?
    Are there any other URL functions we should have?
    
    COMPATIBLE: New API


Possible changes

- New Inetaddr functions:
    
    gint 
    gnet_inetaddr_name_to_port (gchar* service, gchar* proto)	    
        [Uses getservbyname()]

    Maps the service-protocol pair to a port number.  @proto can be
    "tcp", "udp", or NULL.  Usually, the port numbers for the TCP and
    UDP service are identical.  On Unix systems, functionality depends
    on the /etc/services file.
    

    gchar*    
    gnet_inetaddr_port_to_name (int port, gchar* proto)		
        [Uses getservbyport()]


========================================
DONE

- IPv6 support.  IPv6 policy.

- Renamed gnet_udp_{get,set}_mcast_ttl() to gnet_mcast_{get,set}_ttl().

- gnet_udp_socket_get_ttl returns -1 if the kernel default is being
    used.  Before -1 signified error.  Now < -1 signified error.

- New function: gnet_inetaddr_new_bytes().  Creates a GInetAddr from
    raw bytes.

- New functions: gnet_inetaddr_new_list() and
    gnet_inetaddr_new_list_async().  These return GLists of
    GInetAddr's.  A domain name can map to serveral addresses.
    This new API exposes this.

- TCP new async's callback may be called in the create function.
    Maybe fix this to be consistent with InetAddr.

- URI parsing:

    gnet_uri_new("") results in NULL.  Before it created a GURI.


- Remove "localhost" check from gnet_inetaddr_new_nonblock().

    BINARY INCOMPATIBLE: But very minor.

- gnet_*_get_iochannel() renamed gnet_*_get_io_channel()

    BINARY AND SOURCE-CODE INCOMPATIBLE

    There are are source-code compatible macros, but the semantics
    have changed.  get_io_channel() no longer refs 

    (Note that get_io_channel() is also not binary compatible -
     the ref/unref semantics have changed)

- GInetAddrNewAsyncFunc's inetaddr should be callee owned.  It's a
    new() function so this makes more sense.

    BINARY INCOMPATIBLE: May result in memory leaks.

- Simplify callbacks.  Prototypes of GInetAddrGetNameAsyncFunc,
    GInetAddrGetNameAsyncFunc, and GNetIOChannelReadAsyncFunc
    have been changed.

    SOURCE-CODE INCOMPATIBLE: Easy to update.

- Rename URL to URI.  Some field names renamed.

    SOURCE-CODE INCOMPATIBLE

- Header files should go into gnet-MAJOR-MINOR, so different versions
    can co-exist.

    COMPATIBLE: Developers should use pkg-config.

- Remove gnet-config

    BUILD INCOMPATIBLE: Developers should now use pkg-config

- gnet_*_get_io_channel() does not ref the channel before returning
    it.  

    BINARY INCOMPATIBLE: Check for unnecessary g_io_channel_unref()'s.

- URI module is no longer experimental.




========================================

NOT DONE


- Derive TcpSocket/UdpSocket from IOChannel

    There's a one-to-one correspondence between the two.  A socket is
    a type of IO channel.  It may be easier for new users to learn and
    use the library if we do this.  It does add a layer of indirection
    which could hurt performance.

    ***REJECTED*** So much of GIOChannel is private that I don't think
    it can be done easily.



- Differentiate between creating and connecting.  

    So you'd have:

    tcp_socket_new(void)            (this just calls socket())
    tcp_socket_connect(InetAddr*)   (this calls bind(), connect())

    The advantage is that we could set options and also allow the user
    to bind to a specific address if the user is on a multi-homed
    system.

    Or, add tcp_socket_new_bind() and have tcp_socket_new call it.
    You shouldn't have to bind a connecting socket, so this may not be
    needed.  (Well, sometimes you do for UDP.)

    GConn does this to an extent, so it may not be necessary.

    SOURCE-CODE INCOMPATIBLE: Easy to update.


    ***REJECTED***: We'd need to know whether the socket is IPv4 or
    IPv6 (e.g., we'd need tcp_socket_new_ipv4() and
    tcp_socket_new_ipv6()).  This makes it more complicated.  Or, we'd
    need to defer socket creation and keep track of what options have
    been set, which is messy and bug-prone.  Binding a socket for an
    outgoing connection is rarely needed.
