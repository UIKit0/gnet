<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!entity gnet SYSTEM "sgml/gnet.sgml">
<!entity inetaddr SYSTEM "sgml/inetaddr.sgml">
<!entity tcp SYSTEM "sgml/tcp.sgml">
<!entity unix SYSTEM "sgml/unix.sgml">
<!entity udp SYSTEM "sgml/udp.sgml">
<!entity mcast SYSTEM "sgml/mcast.sgml">
<!entity iochannel SYSTEM "sgml/iochannel.sgml">
<!entity url SYSTEM "sgml/url.sgml">
<!entity conn SYSTEM "sgml/conn.sgml">
<!entity server SYSTEM "sgml/server.sgml">
<!entity pack SYSTEM "sgml/pack.sgml">
<!entity md5 SYSTEM "sgml/md5.sgml">
<!entity sha SYSTEM "sgml/sha.sgml">
]>

<book>

  <bookinfo>

    <title>GNet Network Library Reference Manual</title>

    <authorgroup>
      <author>
        <firstname>David</firstname>
        <surname>Helder</surname>
        <affiliation>
	  <address>
	    <email>dhelder@umich.edu</email>
	  </address>
        </affiliation>
      </author>
    </authorgroup>

    <copyright>
      <year>2000-2001</year>
      <holder>David Helder</holder>
    </copyright>	

    <legalnotice>
      <para>
	Permission is granted to make and distribute verbatim copies
	of this manual provided the copyright notice and this
	permission notice are preserved on all copies.
      </para>

      <para>
	Permission is granted to copy and distribute modified versions
	of this manual under the conditions for verbatim copying,
	provided also that the entire resulting derived work is
	distributed under the terms of a permission notice identical
	to this one.
      </para>

      <para>
	Permission is granted to copy and distribute translations of
	this manual into another language, under the above conditions
	for modified versions.
      </para>
    </legalnotice>

    <abstract>
      <para>
	This manual documents GNet, a networking library.  It gives an
	overview of GNet, discusses examples that come with GNet, and
	includes detailed documentation of the GNet API.
      </para>
    </abstract>

  </bookinfo>

  <!-- ---------------------------------------- -->

  <chapter id="gnet-overview">
    <title>GNet Overview</title>

    <para>
      GNet is a simple networking library.  It is writen in C,
      object-oriented, and built upon glib.  It is intended to be
      small, fast, easy-to-use, and easy to port.  It is somewhere
      between being wrappers over the standard network sockets library
      and providing high-level client and server abstractions.
    </para>

    <para>
      Features:
      <itemizedlist>
	<listitem><para>TCP "client" and "server" sockets</para></listitem>
        <listitem><para>UDP and IP Multicast</para></listitem>
        <listitem><para>Internet address abstraction</para></listitem>
        <listitem><para>Asynchronous socket IO</para></listitem>
	<listitem><para>Asynchronous DNS lookup</para></listitem>
	<listitem><para>SHA and MD5 hashes</para></listitem>
	<listitem><para>Byte packing and unpacking</para></listitem>
      </itemizedlist>
    </para>

    <para>
      GNet is under the GNU Lesser General Public License.  Read
      COPYING for information on the license (this file comes with the
      GNet distribution).  In a nutshell: You can share GNet with your
      friends and make changes to it, but it's not our fault if it
      breaks your computer.
    </para>

  </chapter>

  <!-- ---------------------------------------- -->

  <chapter id="gnet-developers">
    <title>GNet for developers</title>

    <sect1 id="gnet-developers-compiling">
      <title>Compiling programs with GNet</title>

      <para>
	If you are a developer and you want to use GNet in your
	program, you can use the gnet-config script to figure out
	which flags need to set when compiling.  For example, type
	<userinput>gcc main.c `gnet-config --cflags --libs`</userinput>
	to compile the program main.c with GNet and link it to GNet.
      </para>

      <para>
	If you use autoconf and automake, you can use the
	<filename>gnet.m4</filename> macros to set the appropriate
	variables.  Just add this to your configure.in:
      
	<programlisting>
dnl Need GNet
AM_PATH_GNET(&lt;version number&gt;,
  [LIBS="$LIBS $GNET_LIBS" CFLAGS="$CFLAGS $GNET_CFLAGS"],
  AC_MSG_ERROR(Cannot find GNet: Is gnet-config in path?))
	</programlisting>

	Where &lt;version number&gt; is the version of GNet you're
	using (e.g. 1.0.4).  You can get the version number by doing
	<userinput>gnet-config --version</userinput>.

      </para>
    </sect1>

    <sect1 id="gnet-developers-tips">
      <title>Other tips and tricks</title>

      <para>
	GNet was designed so that most of the implementation is hidden
	from the programmer.  You should not have to include any
	network header files other than
	<filename>gnet/gnet.h</filename>.
      </para>
      
      <para>
	GLib includes the functions <function>g_ntohs</function>,
	<function>g_htons</function>, <function>g_ntohl</function>,
	and <function>g_htonl</function>.  Use these instead of the
	versions in <filename>netinet/in.h</filename>.
      </para>

      <para>
	"Non-blocking" functions return immediately.  Asynchronous
	functions are non-blocking and call a callback when completed.
	IO operations on socket IOChannels (e.g., read, write) are not
	non-blocking.  Use GLib's asynchronous g_io_add_watch on a
	GIOChannel to set a callback to be called when the GIOChannel
	can be read (or written to, or there's an error).  See the
	echoclient and echoserver for examples.
      </para>

    </sect1>

  </chapter>

  <!-- ---------------------------------------- -->

  <chapter id="gnet-examples">
    <title>GNet Examples</title>

    <para>
      GNet comes with several example programs.  They are intented to
      be used by developers as examples of how to use GNet.  The
      example programs are in the examples directory that comes with
      the source code.  To build the examples, install GNet then go to
      this directory and type <userinput>make examples</userinput>.  This
      section describes what each of the example programs does.
    </para>

    <sect1 id="echo">
      <title>echoclient and echoserver</title>

      <para>
	The echoclient connects to the echoserver and sends data it
	reads in from the user.  echoserver then sends it back and
	echoclient prints it out.  These programs demonstrate how to
	write a basic TCP-based client and server.  echoclient-udp and
	echoserver-udp are the UDP equivalents.
      </para>

      <para>
	There are two methods of writing an server demonstrated:
	blocking and non-blocking.  The blocking methods accepts a
	connection and reads and writes to the socket until the socket
	is closed.  No more than one echoclient can be connected at
	once.  A good, robust server wouldn't use this method, but it
	is suitable for many simple applications.
      </para>

      <para>
	The second method is the non-blocking method.  The server does
	not block while reading or writing to a socket or waiting for
	a connect.  Since it's never blocked, it can accept new
	connects when it isn't reading or writing to another socket.
	Really it could block a little bit on those reads or writes,
	but since it only reads when there's something to be read and
	writes when there's buffer space to write into, this is rare.
      </para>

      <para>
	The advantage of the non-blocking method is that multiple
	clients can be served at once.  It's generally the best method
	to use.  We use the glib event loop and GIOChannels for this.
      </para>

      <para>
	(There is also an experimental third object method that uses
	the Conn and Server modules.  If you are adventurous, you can
	use this method.  Note that these modules may be buggy and the
	interfaces may change.)
      </para>

      <para>
	Another method, not implemented yet, is to use threads.  The
	advantage is that it's easier to code.  The disadvantage is
	it's not as efficient on a single-processor machine or on a
	machine that doesn't have a good threads implementation.  If
	you feel like implementing this, please email us the code and
	we will include it.
      </para>

    </sect1>

    <sect1 id="hfetch">
      <title>hfetch</title>

      <para>
	hfetch is a simple HTTP file fetcher.  It's braindead -
	possibly not even HTTP version 0.9 compliant.  Please don't
	let this encourage you to start a project based on hfetch -
	there are other programs like 'curl' and a billion perl
	scripts that do this much better.  On the other hand, gnet
	could use a good http module.
      </para>

    </sect1>


    <sect1 id="sdr">
      <title>SDR</title>

      <para>
	SDR prints multimedia session announcements.  It demonstrates
	how to use multicast sockets in GNet.  SDR will only work if
	your network supports IP Multicast.  In fact, SDR is a good
	test for this.  If the network supports multicast, SDR will
	print announcements after a few seconds, otherwise, it will
	print nothing.
      </para>

    </sect1>


    <sect1 id="ljoust">
      <title>Llama Joust</title>

      <para>
	ljoust is Networked Llama Joust.  You control a flying llama
	and can fly around the screen and bounce off things.  It uses
	GNet's multicast for the networking and GTK for the GUI.  The
	game in incomplete - there is no llama-to-llama collision
	detection and no scoring.
      </para>

    <sect1 id="tests">
      <title>Various test files</title>
      
      <para>
	The tests directory also has many examples including:
	<itemizedlist>
	  <listitem><para>dnstest.c - a DNS and async DNS example</para></listitem>
	  <listitem><para>hash.c - a SHA/MD5 hash example</para></listitem>
	  <listitem><para>hostinfo.c - a InetAddr help function example</para></listitem>
	  <listitem><para>pack.c - a pack example</para></listitem>
	  <listitem><para>unpack.c - an unpack example</para></listitem>
	</itemizedlist>
      </para>

    </sect1>

  </chapter>

  <!-- ---------------------------------------- -->

  <chapter id="libgnet-reference">
    <title>GNet Library Reference</title>

    <para>
      This section contains the API reference for gnet. All the public
      interfaces are documented here. This reference guide is built by
      extracting comments from the code sources.
    </para>

    &gnet;
    &inetaddr;
    &tcp;
    &unix;
    &socks;
    &udp;
    &mcast;
    &iochannel;
    &pack;
    &md5;
    &sha;
    &url;
    &conn;
    &server;
    
  </chapter>
</book>

